#include<iostream>
#include<string>
#define max 1000
using namespace std;
struct person {
	string m_name;
	int m_sex;
	int m_age;
	string m_phone;
	string m_addr;
};
struct address {
	struct person parr[max];
	int m_size;
};
void addperson(address *n) {
	if (n->m_size == max) {
		cout << "通讯录已满！" << endl;
	} else {
		//姓名
		string name;
		cout << "请输入姓名" << endl;
		cin >> name;
		n->parr[n->m_size].m_name = name;
		//性别
		cout << "请输入性别：" << endl;
		cout << "1--男" << endl;
		cout << "2--女" << endl;
		int sex = 0;
		while (1) {
			cin >> sex;
			if (sex == 1 || sex == 2) {
				n->parr[n->m_size].m_sex = sex;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}
		//年龄
		cout << "请输入年龄" << endl;
		int age = 0;
		cin >> age;
		n->parr[n->m_size].m_age = age;
		//电话
		cout << "请输入电话" << endl;
		string phone;
		cin >> phone;
		n->parr[n->m_size].m_phone = phone;
		//住址
		cout << "请输入住址" << endl;
		string addr;
		cin >> addr;
		n->parr[n->m_size].m_addr = addr;
		//更新人数
		n->m_size++;
		cout << "添加成功" << endl;
		system("pause");
		system("cls");
	}
}
void showperson(address *n) {
	//判断人数是否为0
	if (n->m_size == 0) {
		cout << "当前记录为空" << endl;
	} else {
		for (int i = 0; i < n->m_size; i++) {
			cout << "姓名:" << n->parr[i].m_name <<  "\t";
			cout << "性别:" << (n->parr[i].m_sex == 1 ? "男" : "女") << "\t";
			cout << "年龄:" << n->parr[i].m_age <<  "\t";
			cout << "电话:" << n->parr[i].m_phone <<  "\t";
			cout << "地址:" << n->parr[i].m_addr << endl;
		}
	}
	system("pause");
	system("cls");
}
void Delete(address *n) {
	int i;
	cout << "请输入删除的联系人的姓名：" << endl;
	string name;
	cin >> name;
	for (i = 0; i < n->m_size; i++) {
		if (n->parr[i].m_name == name) {
			break;
		}
	}
	if (i < n->m_size) {
		for (int j = i; j < n->m_size; j++) {
			n->parr[j] = n->parr[j + 1];
		}
		cout << "删除成功" << endl;
		n->m_size--;
	}
	if (i == n->m_size) {
		cout << "该联系人不存在" << endl;
	}
	system("pause");
	system("cls");
}
void find(address* n) {
	int i;
	cout << "请输入你要查找的联系人的姓名" << endl;
	string name;
	cin >> name;
	for (i = 0; i < n->m_size; i++) {
		if (n->parr[i].m_name == name) {
			break;
		}
	}
	if (i < n->m_size) {
		cout << "姓名: " << n->parr[i].m_name << "\t";
		cout << "性别: " << (n->parr[i].m_sex == 1 ? "男" : "女") << "\t";
		cout << "年龄: " << n->parr[i].m_age << "\t";
		cout << "电话: " << n->parr[i].m_phone << "\t";
		cout << "住址: " << n->parr[i].m_addr << endl;

	} else {
		cout << "没有该联系人" << endl;
	}
	system("pause");
	system("cls");
}
void modify(address *n) {
	cout << "请输入要修改的联系人的姓名" << endl;
	string name;
	int i;
	cin >> name;
	for (i = 0; i < n->m_size; i++) {
		if (n->parr[i].m_name == name) {
			break;
		}
	}
	if (i < n->m_size) {
		//姓名
		string name;
		cout << "请输入你要修改的姓名" << endl;
		cin >> name;
		n->parr[i].m_name = name;
		//性别
		cout << "请输入你要修改的性别" << endl;
		int sex = 0;
		while (1) {
			cin >> sex;
			if (sex == 1 || sex == 2) {
				n->parr[i].m_sex = sex;
				break;
			}
			cout << "输入有误请重新输入" << endl;
		}
		//年龄
		cout << "请输入年龄" << endl;
		int age = 0;
		cin >> age;
		n->parr[i].m_age = age;
		//电话
		cout << "请输入电话" << endl;
		string phone;
		cin >> phone;
		n->parr[i].m_phone = phone;
		//住址
		cout << "请输入住址" << endl;
		string addr;
		cin >> addr;
		n->parr[i].m_addr = addr;
		cout << "修改成功" << endl;
	}
	if (i == n->m_size) {
		cout << "该联系人不存在" << endl;
	}
	system("pause");
	system("cls");
}
void clean(address *n)
{
	n->m_size=0;
	cout<<"通讯录已清空"<<endl;
	system("pause");
	system("cls");
}


void showMenu() {
	cout << "**********************" << endl;
	cout << "*****1.添加联系人*****" << endl;
	cout << "*****2.显示联系人*****" << endl;
	cout << "*****3.删除联系人*****" << endl;
	cout << "*****4.查找联系人*****" << endl;
	cout << "*****5.修改联系人*****" << endl;
	cout << "*****6.清空联系人*****" << endl;
	cout << "*****0.退出通讯录*****" << endl;
	cout << "**********************" << endl;
}
int main() {
	int select = 0;
	address abs;
	abs.m_size = 0;
	while (1) {
		showMenu();
		cin >> select;
		switch (select) {
			case 1:
				addperson(&abs);
				break;
			case 2:
				showperson(&abs);
				break;
			case 3:
				Delete(&abs);
				break;
			case 4:
				find(&abs);
				break;
			case 5:
				modify(&abs);
				break;
			case 6:
				clean(&abs);
				break;
			case 0:
				cout << "欢迎下次使用" << endl;
				return 0;
		}
	}
	
}
